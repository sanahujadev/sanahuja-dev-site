---
import Container from "./Container.astro"
import Avatar from "./Avatar.astro";
import type { CallToAction } from "../i18n/utils";

const { t } = Astro.props as { t: CallToAction };

const buttonClasses: { [key: string]: string } = {
  primary: "relative flex h-12 w-full items-center justify-center px-8 before:absolute before:inset-0 before:rounded-full before:bg-primary before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 sm:w-max",
  secondary: "relative flex h-12 w-full items-center justify-center px-8 before:absolute before:inset-0 before:rounded-full before:border before:border-transparent before:bg-primary-softest before:bg-gradient-to-b before:transition before:duration-300 hover:before:scale-105 active:duration-75 active:before:scale-95 dark:before:border-border-default-dark dark:before:bg-bg-surface-dark sm:w-max"
};
const spanClasses: { [key: string]: string } = {
  primary: "relative text-base font-semibold text-text-on-primary",
  secondary: "relative text-base font-semibold text-primary dark:text-text-default-dark"
};
---

<div class="relative">
  <div aria-hidden="true" class="absolute inset-0 h-max w-full m-auto grid grid-cols-2 -space-x-52 opacity-40 dark:opacity-20">
    <div class="blur-[106px] h-56 bg-gradient-to-br from-primary to-accent-gradient-stop dark:from-primary-gradient-start-dark"></div>
    <div class="blur-[106px] h-32 bg-gradient-to-r from-secondary-gradient-start to-secondary-gradient-stop dark:to-secondary-gradient-stop-dark"></div>
  </div>
  <Container>
    <div class="relative">
      <div class="flex items-center justify-center -space-x-2">
        {t.avatars.map((avatar, index) => {
          // A little trick to deal the correct size and layer based on the card's position
          const isCenter = index === 2;
          const isInner = index === 1 || index === 3;
          const sizeClass = isCenter ? 'h-16 w-16' : isInner ? 'h-12 w-12' : 'h-8 w-8';
          
          return (
            <div class:list={[ 'relative', { 'z-10': isCenter } ]}>
              <Avatar imageName={avatar.imageName} name={avatar.alt} alt={avatar.alt} class:list={[sizeClass]} />
            </div>
          );
        })}
      </div>
      <div class="mt-6 m-auto space-y-6 md:w-8/12 lg:w-7/12">
        <h1 class="text-center text-4xl font-bold text-text-stronger dark:text-text-default-dark md:text-5xl">
          {t.headline}
        </h1>
        <p class="text-center text-xl text-text-muted dark:text-text-muted-dark">
          {t.subtitle}
        </p>
        <div class="flex flex-wrap justify-center gap-6">
          {t.actions.map(action => (
            <a href={action.href} class={buttonClasses[action.variant]}>
              <span class={spanClasses[action.variant]}>{action.text}</span>
            </a>
          ))}
        </div>
      </div>
    </div>
  </Container>
</div>